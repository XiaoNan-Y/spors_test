{"remainingRequest":"C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\src\\views\\admin\\UserForm.vue?vue&type=style&index=0&id=32950f29&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\src\\views\\admin\\UserForm.vue","mtime":1742203147503},{"path":"C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\node_modules\\css-loader\\dist\\cjs.js","mtime":1741946995932},{"path":"C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1741947007541},{"path":"C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\node_modules\\postcss-loader\\src\\index.js","mtime":1741947003089},{"path":"C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741946992817},{"path":"C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\node_modules\\vue-loader\\lib\\index.js","mtime":1741947007540}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQoudXNlci1mb3JtIHsNCiAgbWF4LXdpZHRoOiA2MDBweDsNCiAgbWFyZ2luOiAyMHB4IGF1dG87DQp9DQo="},{"version":3,"sources":["UserForm.vue"],"names":[],"mappings":";AAuIA;AACA;AACA;AACA","file":"UserForm.vue","sourceRoot":"src/views/admin","sourcesContent":["<template>\r\n  <div class=\"user-form\">\r\n    <el-form :model=\"form\" :rules=\"rules\" ref=\"form\" label-width=\"100px\">\r\n      <el-form-item label=\"用户名\" prop=\"username\" v-if=\"!isEdit\">\r\n        <el-input v-model=\"form.username\" placeholder=\"请输入用户名\"></el-input>\r\n      </el-form-item>\r\n      \r\n      <el-form-item label=\"用户类型\" prop=\"userType\">\r\n        <el-select v-model=\"form.userType\" placeholder=\"请选择用户类型\">\r\n          <el-option label=\"学生\" value=\"STUDENT\"></el-option>\r\n          <el-option label=\"教师\" value=\"TEACHER\"></el-option>\r\n        </el-select>\r\n      </el-form-item>\r\n\r\n      <el-form-item label=\"姓名\" prop=\"realName\">\r\n        <el-input v-model=\"form.realName\" placeholder=\"请输入姓名\"></el-input>\r\n      </el-form-item>\r\n\r\n      <!-- 只在用户类型为学生时显示学号输入框 -->\r\n      <el-form-item v-if=\"userType === 'STUDENT'\" label=\"学号\" prop=\"studentNumber\">\r\n        <el-input v-model=\"form.studentNumber\" placeholder=\"请输入学号\"></el-input>\r\n      </el-form-item>\r\n\r\n      <el-form-item label=\"邮箱\" prop=\"email\">\r\n        <el-input v-model=\"form.email\" placeholder=\"请输入邮箱\"></el-input>\r\n      </el-form-item>\r\n\r\n      <el-form-item label=\"电话\" prop=\"phone\">\r\n        <el-input v-model=\"form.phone\" placeholder=\"请输入电话\"></el-input>\r\n      </el-form-item>\r\n\r\n      <el-form-item>\r\n        <el-button type=\"primary\" @click=\"submitForm\">保存</el-button>\r\n        <el-button @click=\"resetForm\">重置</el-button>\r\n      </el-form-item>\r\n    </el-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'UserForm',\r\n  props: {\r\n    userType: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      isEdit: false,\r\n      form: {\r\n        id: null,\r\n        username: '',\r\n        userType: '',\r\n        realName: '',\r\n        studentNumber: '',\r\n        email: '',\r\n        phone: ''\r\n      },\r\n      rules: {\r\n        username: [\r\n          { required: true, message: '请输入用户名', trigger: 'blur' }\r\n        ],\r\n        userType: [\r\n          { required: true, message: '请选择用户类型', trigger: 'change' }\r\n        ],\r\n        realName: [\r\n          { required: true, message: '请输入姓名', trigger: 'blur' }\r\n        ],\r\n        studentNumber: [\r\n          { required: true, message: '请输入学号', trigger: 'blur' }\r\n        ],\r\n        email: [\r\n          { type: 'email', message: '请输入正确的邮箱地址', trigger: 'blur' }\r\n        ]\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    setFormData(user) {\r\n      this.isEdit = true\r\n      this.form = { ...user }\r\n    },\r\n    submitForm() {\r\n      this.$refs.form.validate(async (valid) => {\r\n        if (valid) {\r\n          try {\r\n            const url = this.isEdit ? \r\n              `/api/admin/users/${this.form.id}` : \r\n              '/api/admin/users'\r\n            const method = this.isEdit ? 'put' : 'post'\r\n            \r\n            this.form.userType = this.userType\r\n            const response = await this.$axios[method](url, this.form)\r\n            \r\n            if (response.data.code === 200) {\r\n              this.$message.success('保存成功')\r\n              this.$emit('saved')\r\n              this.resetForm()\r\n            } else {\r\n              this.$message.error(response.data.msg || '保存失败')\r\n            }\r\n          } catch (error) {\r\n            this.$message.error('保存失败：' + error.message)\r\n          }\r\n        }\r\n      })\r\n    },\r\n    resetForm() {\r\n      this.$refs.form.resetFields()\r\n      this.isEdit = false\r\n      this.form = {\r\n        id: null,\r\n        username: '',\r\n        userType: '',\r\n        realName: '',\r\n        studentNumber: '',\r\n        email: '',\r\n        phone: ''\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    'form.userType'(newVal) {\r\n      // 当用户类型改变时，如果不是学生，清空学号\r\n      if (newVal !== 'STUDENT') {\r\n        this.form.studentNumber = '';\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.user-form {\r\n  max-width: 600px;\r\n  margin: 20px auto;\r\n}\r\n</style>"]}]}