{"remainingRequest":"C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\src\\views\\teacher\\StudentRecords.vue?vue&type=style&index=0&id=bef733e4&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\src\\views\\teacher\\StudentRecords.vue","mtime":1742819921968},{"path":"C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\node_modules\\css-loader\\dist\\cjs.js","mtime":1741946995932},{"path":"C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1741947007541},{"path":"C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\node_modules\\postcss-loader\\src\\index.js","mtime":1741947003089},{"path":"C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1741946992817},{"path":"C:\\Users\\HP\\Desktop\\sports_test\\sports_front\\node_modules\\vue-loader\\lib\\index.js","mtime":1741947007540}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5zdHVkZW50LXJlY29yZHMgewogIHBhZGRpbmc6IDIwcHg7Cn0KLmZpbHRlci1zZWN0aW9uIHsKICBtYXJnaW4tYm90dG9tOiAyMHB4Owp9Ci5wYWdpbmF0aW9uLWNvbnRhaW5lciB7CiAgbWFyZ2luLXRvcDogMjBweDsKICB0ZXh0LWFsaWduOiByaWdodDsKfQouZGlhbG9nLWZvb3RlciB7CiAgdGV4dC1hbGlnbjogcmlnaHQ7Cn0K"},{"version":3,"sources":["StudentRecords.vue"],"names":[],"mappings":";AA+XA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StudentRecords.vue","sourceRoot":"src/views/teacher","sourcesContent":["<template>\n  <div class=\"student-records\">\n    <!-- 搜索筛选区 -->\n    <div class=\"filter-section\">\n      <el-form :inline=\"true\" :model=\"queryParams\" ref=\"queryForm\">\n        <el-form-item label=\"班级\">\n          <el-select v-model=\"queryParams.className\" placeholder=\"选择班级\" clearable>\n            <el-option\n              v-for=\"className in classNames\"\n              :key=\"className\"\n              :label=\"className\"\n              :value=\"className\"\n            ></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"测试项目\">\n          <el-select v-model=\"queryParams.sportsItemId\" placeholder=\"选择测试项目\" clearable>\n            <el-option\n              v-for=\"item in sportsItems\"\n              :key=\"item.id\"\n              :label=\"item.name\"\n              :value=\"item.id\"\n            ></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"状态\">\n          <el-select v-model=\"queryParams.status\" placeholder=\"选择状态\" clearable>\n            <el-option label=\"待审核\" value=\"PENDING\"></el-option>\n            <el-option label=\"已通过\" value=\"APPROVED\"></el-option>\n            <el-option label=\"已驳回\" value=\"REJECTED\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"学号\">\n          <el-input \n            v-model=\"queryParams.studentNumber\" \n            placeholder=\"请输入学号\"\n            clearable\n          ></el-input>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"handleQuery\">查询</el-button>\n          <el-button @click=\"resetQuery\">重置</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n\n    <!-- 数据表格 -->\n    <el-table\n      v-loading=\"loading\"\n      :data=\"tableData\"\n      style=\"width: 100%\"\n      border>\n      <el-table-column type=\"index\" label=\"序号\" width=\"60\"></el-table-column>\n      <el-table-column prop=\"studentInfo.realName\" label=\"学生姓名\"></el-table-column>\n      <el-table-column prop=\"studentInfo.studentNumber\" label=\"学号\"></el-table-column>\n      <el-table-column prop=\"studentInfo.className\" label=\"班级\"></el-table-column>\n      <el-table-column prop=\"sportsItem.name\" label=\"测试项目\"></el-table-column>\n      <el-table-column prop=\"score\" label=\"成绩\"></el-table-column>\n      <el-table-column label=\"操作\" width=\"180\" align=\"center\">\n        <template slot-scope=\"scope\">\n          <el-button\n            size=\"mini\"\n            type=\"primary\"\n            @click=\"handleEdit(scope.row)\"\n            :disabled=\"!canEdit(scope.row)\">\n            修改\n          </el-button>\n          <el-button\n            size=\"mini\"\n            type=\"info\"\n            @click=\"handleDetail(scope.row)\">\n            详情\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- 分页 -->\n    <div class=\"pagination-container\">\n      <el-pagination\n        @size-change=\"handleSizeChange\"\n        @current-change=\"handleCurrentChange\"\n        :current-page=\"queryParams.pageNum\"\n        :page-sizes=\"[10, 20, 50, 100]\"\n        :page-size=\"queryParams.pageSize\"\n        layout=\"total, sizes, prev, pager, next, jumper\"\n        :total=\"total\">\n      </el-pagination>\n    </div>\n\n    <!-- 添加修改对话框 -->\n    <el-dialog\n      title=\"修改成绩\"\n      :visible.sync=\"editDialog.visible\"\n      width=\"500px\"\n      @closed=\"handleEditDialogClosed\">\n      <el-form\n        :model=\"editForm\"\n        :rules=\"editRules\"\n        ref=\"editForm\"\n        label-width=\"100px\">\n        <el-form-item label=\"学生姓名\">\n          <span>{{ editForm.studentName }}</span>\n        </el-form-item>\n        <el-form-item label=\"测试项目\">\n          <span>{{ editForm.sportsItemName }}</span>\n        </el-form-item>\n        <el-form-item label=\"成绩\" prop=\"score\">\n          <el-input v-model.number=\"editForm.score\" type=\"number\"></el-input>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"editDialog.visible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"submitEdit\">确 定</el-button>\n      </div>\n    </el-dialog>\n\n    <!-- 添加详情对话框 -->\n    <el-dialog\n      title=\"成绩详情\"\n      :visible.sync=\"detailDialog.visible\"\n      width=\"500px\">\n      <el-descriptions :column=\"1\" border>\n        <el-descriptions-item label=\"学生姓名\">{{ detailForm.studentName }}</el-descriptions-item>\n        <el-descriptions-item label=\"学号\">{{ detailForm.studentNumber }}</el-descriptions-item>\n        <el-descriptions-item label=\"班级\">{{ detailForm.className }}</el-descriptions-item>\n        <el-descriptions-item label=\"测试项目\">{{ detailForm.sportsItemName }}</el-descriptions-item>\n        <el-descriptions-item label=\"成绩\">{{ detailForm.score }}</el-descriptions-item>\n        <el-descriptions-item label=\"状态\">\n          <el-tag :type=\"getStatusType(detailForm.status)\">\n            {{ getStatusText(detailForm.status) }}\n          </el-tag>\n        </el-descriptions-item>\n        <el-descriptions-item label=\"创建时间\">{{ detailForm.createdAt }}</el-descriptions-item>\n        <el-descriptions-item label=\"更新时间\">{{ detailForm.updatedAt }}</el-descriptions-item>\n      </el-descriptions>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'StudentRecords',\n  data() {\n    return {\n      loading: false,\n      queryParams: {\n        pageNum: 1,\n        pageSize: 10,\n        className: '',\n        sportsItemId: undefined,\n        status: '',\n        studentNumber: ''\n      },\n      classNames: [],\n      sportsItems: [],\n      tableData: [],\n      total: 0,\n      editDialog: {\n        visible: false\n      },\n      editForm: {\n        id: null,\n        studentName: '',\n        sportsItemName: '',\n        score: null\n      },\n      editRules: {\n        score: [\n          { required: true, message: '请输入成绩', trigger: 'blur' },\n          { type: 'number', message: '成绩必须为数字', trigger: 'blur' }\n        ]\n      },\n      detailDialog: {\n        visible: false\n      },\n      detailForm: {\n        studentName: '',\n        studentNumber: '',\n        className: '',\n        sportsItemName: '',\n        score: null,\n        status: '',\n        createdAt: '',\n        updatedAt: ''\n      }\n    }\n  },\n  created() {\n    this.init()\n  },\n  methods: {\n    async init() {\n      await Promise.all([\n        this.getClassNames(),\n        this.getSportsItems(),\n        this.getList()\n      ])\n    },\n    async getList() {\n      try {\n        this.loading = true\n        const response = await this.$axios.get('/api/teacher/student-records', {\n          params: {\n            page: this.queryParams.pageNum - 1,\n            size: this.queryParams.pageSize,\n            className: this.queryParams.className,\n            sportsItemId: this.queryParams.sportsItemId,\n            status: this.queryParams.status,\n            keyword: this.queryParams.studentNumber\n          }\n        })\n        \n        if (response.data.code === 200) {\n          this.tableData = response.data.data.content\n          this.total = response.data.data.totalElements\n        }\n      } catch (error) {\n        console.error('获取列表失败:', error)\n        this.$message.error('获取列表失败: ' + error.message)\n      } finally {\n        this.loading = false\n      }\n    },\n    async getClassNames() {\n      try {\n        const res = await this.$axios.get('/api/teacher/classes')\n        if (res.data.code === 200) {\n          this.classNames = res.data.data\n        }\n      } catch (error) {\n        console.error('获取班级列表失败:', error)\n      }\n    },\n    async getSportsItems() {\n      try {\n        const res = await this.$axios.get('/api/teacher/sports-items')\n        if (res.data.code === 200) {\n          this.sportsItems = res.data.data\n        }\n      } catch (error) {\n        console.error('获取体测项目列表失败:', error)\n      }\n    },\n    handleQuery() {\n      this.queryParams.pageNum = 1\n      this.getList()\n    },\n    resetQuery() {\n      this.$refs.queryForm.resetFields()\n      this.queryParams = {\n        pageNum: 1,\n        pageSize: 10,\n        className: '',\n        sportsItemId: undefined,\n        status: '',\n        studentNumber: ''\n      }\n      this.getList()\n    },\n    handleSizeChange(val) {\n      this.queryParams.pageSize = val\n      this.getList()\n    },\n    handleCurrentChange(val) {\n      this.queryParams.pageNum = val\n      this.getList()\n    },\n    getStatusType(status) {\n      const statusMap = {\n        'PENDING': 'warning',\n        'APPROVED': 'success',\n        'REJECTED': 'danger'\n      }\n      return statusMap[status] || 'info'\n    },\n    getStatusText(status) {\n      const statusMap = {\n        'PENDING': '待审核',\n        'APPROVED': '已通过',\n        'REJECTED': '已驳回'\n      }\n      return statusMap[status] || status\n    },\n    canEdit(row) {\n      return row.status === 'PENDING' || row.status === 'REJECTED'\n    },\n    handleEdit(row) {\n      this.editForm = {\n        id: row.id,\n        studentName: row.studentInfo.realName,\n        sportsItemName: row.sportsItem.name,\n        score: row.score\n      }\n      this.editDialog.visible = true\n    },\n    handleDetail(row) {\n      this.detailForm = {\n        studentName: row.studentInfo.realName,\n        studentNumber: row.studentInfo.studentNumber,\n        className: row.studentInfo.className,\n        sportsItemName: row.sportsItem.name,\n        score: row.score,\n        status: row.status,\n        createdAt: row.createdAt,\n        updatedAt: row.updatedAt\n      }\n      this.detailDialog.visible = true\n    },\n    submitEdit() {\n      this.$refs.editForm.validate(async (valid) => {\n        if (valid) {\n          try {\n            console.log('开始提交修改请求，表单数据：', this.editForm);\n            \n            // 确保成绩是数字类型\n            const score = parseFloat(this.editForm.score);\n            if (isNaN(score)) {\n              this.$message.error('请输入有效的成绩');\n              return;\n            }\n\n            console.log('发送请求前的数据：', {\n              id: this.editForm.id,\n              score: score\n            });\n\n            const response = await this.$axios.put(\n              `/api/teacher/test-records/${this.editForm.id}`,\n              { score: score },\n              {\n                headers: {\n                  'Content-Type': 'application/json'\n                }\n              }\n            );\n            \n            console.log('服务器响应：', response);\n\n            if (response.data.code === 200) {\n              this.$message.success('修改成功');\n              this.editDialog.visible = false;\n              this.getList();\n            } else {\n              this.$message.error(response.data.message || '修改失败');\n            }\n          } catch (error) {\n            console.error('修改失败，详细错误信息：', {\n              error: error,\n              response: error.response,\n              message: error.message,\n              stack: error.stack\n            });\n\n            let errorMessage = '修改失败';\n            if (error.response) {\n              console.log('服务器响应状态：', error.response.status);\n              console.log('服务器响应数据：', error.response.data);\n              errorMessage = error.response.data.message || errorMessage;\n            }\n\n            this.$message.error(errorMessage);\n          }\n        } else {\n          console.log('表单验证失败');\n          this.$message.warning('请正确填写表单');\n        }\n      });\n    },\n    handleEditDialogClosed() {\n      this.$refs.editForm?.resetFields()\n      this.editForm = {\n        id: null,\n        studentName: '',\n        sportsItemName: '',\n        score: null\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.student-records {\n  padding: 20px;\n}\n.filter-section {\n  margin-bottom: 20px;\n}\n.pagination-container {\n  margin-top: 20px;\n  text-align: right;\n}\n.dialog-footer {\n  text-align: right;\n}\n</style> "]}]}